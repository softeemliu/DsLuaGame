/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: netpub.proto */

#ifndef PROTOBUF_C_netpub_2eproto__INCLUDED
#define PROTOBUF_C_netpub_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MsgHead MsgHead;
typedef struct _MqHead MqHead;
typedef struct _RmiHead RmiHead;


/* --- enums --- */


/* --- messages --- */

struct  _MsgHead
{
  ProtobufCMessage base;
  protobuf_c_boolean has_flag;
  int32_t flag;
  protobuf_c_boolean has_size;
  int32_t size;
  protobuf_c_boolean has_msgtype;
  int32_t msgtype;
};
#define MSG_HEAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_head__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _MqHead
{
  ProtobufCMessage base;
  protobuf_c_boolean has_commond;
  int32_t commond;
  protobuf_c_boolean has_toid;
  int32_t toid;
};
#define MQ_HEAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mq_head__descriptor) \
    , 0,0, 0,0 }


struct  _RmiHead
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msgid;
  int32_t msgid;
  char *identity;
};
extern char rmi_head__identity__default_value[];
#define RMI_HEAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rmi_head__descriptor) \
    , 0,0, rmi_head__identity__default_value }


/* MsgHead methods */
void   msg_head__init
                     (MsgHead         *message);
size_t msg_head__get_packed_size
                     (const MsgHead   *message);
size_t msg_head__pack
                     (const MsgHead   *message,
                      uint8_t             *out);
size_t msg_head__pack_to_buffer
                     (const MsgHead   *message,
                      ProtobufCBuffer     *buffer);
MsgHead *
       msg_head__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_head__free_unpacked
                     (MsgHead *message,
                      ProtobufCAllocator *allocator);
/* MqHead methods */
void   mq_head__init
                     (MqHead         *message);
size_t mq_head__get_packed_size
                     (const MqHead   *message);
size_t mq_head__pack
                     (const MqHead   *message,
                      uint8_t             *out);
size_t mq_head__pack_to_buffer
                     (const MqHead   *message,
                      ProtobufCBuffer     *buffer);
MqHead *
       mq_head__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mq_head__free_unpacked
                     (MqHead *message,
                      ProtobufCAllocator *allocator);
/* RmiHead methods */
void   rmi_head__init
                     (RmiHead         *message);
size_t rmi_head__get_packed_size
                     (const RmiHead   *message);
size_t rmi_head__pack
                     (const RmiHead   *message,
                      uint8_t             *out);
size_t rmi_head__pack_to_buffer
                     (const RmiHead   *message,
                      ProtobufCBuffer     *buffer);
RmiHead *
       rmi_head__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rmi_head__free_unpacked
                     (RmiHead *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MsgHead_Closure)
                 (const MsgHead *message,
                  void *closure_data);
typedef void (*MqHead_Closure)
                 (const MqHead *message,
                  void *closure_data);
typedef void (*RmiHead_Closure)
                 (const RmiHead *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor msg_head__descriptor;
extern const ProtobufCMessageDescriptor mq_head__descriptor;
extern const ProtobufCMessageDescriptor rmi_head__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_netpub_2eproto__INCLUDED */
